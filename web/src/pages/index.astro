---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import { loadListings, getUniqueEras, getUniqueManufacturers, getUniqueCategories } from '../lib/loadData';

const listings = loadListings();
const eras = getUniqueEras(listings);
const manufacturers = getUniqueManufacturers(listings);
const categories = getUniqueCategories(listings);
---

<Layout title="ToyToons - 1980s & Early 90s Cartoons + Toys">
  <Header />
  
  <main style="max-width: 1200px; margin: 0 auto; padding: 15px 20px;">
    
    <!-- Search and filters row -->
    <div style="margin-bottom: 20px; padding: 10px; border: 2px solid black; background: #f8f8f8;">
      <div style="display: flex; gap: 15px; align-items: center;">
        <input type="text" id="search" placeholder="Search shows..." 
               style="width: 200px; padding: 4px; border: 1px solid black; font-size: 14px;">
        
        <select id="era-filter" style="padding: 4px; border: 1px solid black;">
          <option value="">All Eras</option>
          {eras.map(era => (
            <option value={era}>{era}</option>
          ))}
        </select>
        
        <select id="mfg-filter" style="padding: 4px; border: 1px solid black;">
          <option value="">All Manufacturers</option>
          {manufacturers.map(manufacturer => (
            <option value={manufacturer}>{manufacturer}</option>
          ))}
        </select>
        
        <select id="category-filter" style="padding: 4px; border: 1px solid black;">
          <option value="">All Categories</option>
          {categories.map(category => (
            <option value={category}>{category.charAt(0).toUpperCase() + category.slice(1)}</option>
          ))}
        </select>
      </div>
    </div>

    <!-- Grid Listings -->
    <div id="listings" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(280px, 1fr)); gap: 15px;">
      {listings.map(listing => (
        <div style="border: 2px solid black; padding: 12px; background: white; height: 220px; display: flex; flex-direction: column;">
          
          {listing.main_image_local && (
            <div style="text-align: center; margin-bottom: 8px;">
              <img 
                src={`/${listing.main_image_local}`} 
                alt={listing.show_title || 'Show image'} 
                style="width: 60px; height: 60px; object-fit: cover; border: 1px solid black;"
              />
            </div>
          )}
          
          <div style="flex: 1; overflow: hidden;">
            <h4 style="margin: 0 0 6px 0; font-size: 16px; line-height: 1.2;">
              <a href={`/item/${listing.slug}`} style="color: black; text-decoration: none;">
                <strong>{listing.show_title || 'Unknown Show'}</strong>
              </a>
            </h4>
          
            <div style="margin-bottom: 8px;">
              {listing.era && (
                <span style="background: #f0f0f0; border: 1px solid black; padding: 1px 4px; margin-right: 4px; font-size: 11px;">
                  {listing.era}
                </span>
              )}
              {listing.manufacturer && (
                <span style="background: #f0f0f0; border: 1px solid black; padding: 1px 4px; margin-right: 4px; font-size: 11px;">
                  {listing.manufacturer}
                </span>
              )}
              {listing.category && (
                <span style="background: #e8f5e8; border: 1px solid #4caf50; padding: 1px 4px; font-size: 11px; color: #2e7d32;">
                  {listing.category.charAt(0).toUpperCase() + listing.category.slice(1)}
                </span>
              )}
            </div>
            
            {listing.description_summary && (
              <p style="margin: 0 0 8px 0; line-height: 1.3; font-size: 13px; color: #555; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 3; -webkit-box-orient: vertical;">
                {listing.description_summary.substring(0, 120)}...
              </p>
            )}
          </div>
          
          <div style="margin-top: auto;">
            <a href={`/item/${listing.slug}`} style="font-size: 13px; color: #0000EE;">â†’ View Details</a>
          </div>
        </div>
      ))}
    </div>

    <!-- No Results Message (hidden by default, shown by JS when needed) -->
    <div id="no-results" style="display: none; text-align: center; margin: 40px 0;">
      <div style="font-size: 48px; margin-bottom: 20px;">ðŸ˜•</div>
      <h3 style="font-size: 18px; font-weight: bold; margin-bottom: 10px;">No matches found</h3>
      <p style="margin-bottom: 20px;">Try adjusting your search or filters</p>
      <button 
        id="clear-filters-btn"
        style="background: none; border: none; color: #0000EE; text-decoration: underline; cursor: pointer; font-family: Georgia, serif;"
      >
        Clear all filters
      </button>
    </div>

    <hr style="border: none; border-top: 1px solid #ccc; margin: 30px 0 15px 0;">
    
    <!-- Compact Footer -->
    <footer style="text-align: center; font-size: 12px; color: #666;">
      <p style="margin: 0;">
        Built with <a href="https://astro.build">Astro</a> â€¢ 
        Data scraped respectfully â€¢ 
        <a href="https://github.com/swotpilgrim/toytoons">Source</a>
      </p>
    </footer>
  </main>
</Layout>

<script>
  function initializeFilters() {
    console.log('Initializing filters...');
    console.log('Current URL:', window.location.href);
    console.log('Document ready state:', document.readyState);
    
    const searchInput = document.getElementById('search');
    const eraFilter = document.getElementById('era-filter');  
    const mfgFilter = document.getElementById('mfg-filter');
    const categoryFilter = document.getElementById('category-filter');
    const listingsContainer = document.getElementById('listings');
    const noResultsDiv = document.getElementById('no-results');
    const clearFiltersBtn = document.getElementById('clear-filters-btn');
    
    console.log('Elements found:', {
      searchInput: !!searchInput,
      eraFilter: !!eraFilter,
      mfgFilter: !!mfgFilter,
      categoryFilter: !!categoryFilter,
      listingsContainer: !!listingsContainer,
      noResultsDiv: !!noResultsDiv,
      clearFiltersBtn: !!clearFiltersBtn,
    });
    
    if (!listingsContainer) {
      console.error('Listings container not found!');
      return;
    }
    
    // Store original listings
    const originalListings = Array.from(listingsContainer.children);
    console.log('Found listings:', originalListings.length);
    
    function filterListings() {
      console.log('Filtering...');
      const searchTerm = searchInput?.value.toLowerCase() || '';
      const selectedEra = eraFilter?.value || '';
      const selectedMfg = mfgFilter?.value || '';
      const selectedCategory = categoryFilter?.value || '';
      
      console.log('Filters:', { searchTerm, selectedEra, selectedMfg, selectedCategory });
      
      let visibleCount = 0;
      
      originalListings.forEach(listing => {
        const text = listing.textContent.toLowerCase();
        const matchesSearch = !searchTerm || text.includes(searchTerm);
        
        // Get era, manufacturer, and category from spans
        const spans = listing.querySelectorAll('span');
        let listingEra = '';
        let listingMfg = '';
        let listingCategory = '';
        
        // Parse spans in order: era, manufacturer, category
        if (spans.length > 0) {
          const firstSpan = spans[0].textContent.trim();
          if (firstSpan.includes('1980s') || firstSpan.includes('1990s') || firstSpan.includes('early 1990s')) {
            listingEra = firstSpan;
          }
        }
        if (spans.length > 1) {
          const secondSpan = spans[1].textContent.trim();
          if (secondSpan && secondSpan !== listingEra) {
            listingMfg = secondSpan;
          }
        }
        if (spans.length > 2) {
          const thirdSpan = spans[2].textContent.trim();
          if (thirdSpan && thirdSpan !== listingEra && thirdSpan !== listingMfg) {
            listingCategory = thirdSpan.toLowerCase();
          }
        }
        
        const matchesEra = !selectedEra || listingEra === selectedEra;
        const matchesMfg = !selectedMfg || listingMfg === selectedMfg;
        const matchesCategory = !selectedCategory || listingCategory === selectedCategory;
        
        if (matchesSearch && matchesEra && matchesMfg && matchesCategory) {
          listing.style.display = 'flex';
          visibleCount++;
        } else {
          listing.style.display = 'none';
        }
      });
      
      if (noResultsDiv) {
        if (visibleCount === 0) {
          noResultsDiv.style.display = 'block';
        } else {
          noResultsDiv.style.display = 'none';
        }
      }
      
      console.log('Visible count:', visibleCount);
    }
    
    // Add event listeners
    if (searchInput) {
      searchInput.addEventListener('input', filterListings);
      console.log('Search input listener added');
    }
    if (eraFilter) {
      eraFilter.addEventListener('change', filterListings);
      console.log('Era filter listener added');
    }
    if (mfgFilter) {
      mfgFilter.addEventListener('change', filterListings);
      console.log('Manufacturer filter listener added');
    }
    if (categoryFilter) {
      categoryFilter.addEventListener('change', filterListings);
      console.log('Category filter listener added');
    }
    
    // Clear filters
    if (clearFiltersBtn) {
      clearFiltersBtn.addEventListener('click', () => {
        console.log('Clear filters clicked');
        if (searchInput) searchInput.value = '';
        if (eraFilter) eraFilter.value = '';
        if (mfgFilter) mfgFilter.value = '';
        if (categoryFilter) categoryFilter.value = '';
        filterListings();
      });
      console.log('Clear filters listener added');
    }
  }

  // Try multiple ways to initialize
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeFilters);
  } else {
    initializeFilters();
  }
  
  // Fallback - try again after a short delay
  setTimeout(initializeFilters, 100);
</script>

<style>
  /* Simple retro styles */
  #search:focus {
    outline: 2px solid #0000EE;
  }
  
  input[type="checkbox"]:focus {
    outline: 2px solid #0000EE;
  }
  
  /* Hover effects */
  a:hover {
    background-color: #ffffcc;
  }
</style>